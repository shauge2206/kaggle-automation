service: kaggle-automation

frameworkVersion: "3"

provider:
  name: aws
  runtime: dotnet6
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-kaggleDownload
        - arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-dataCleansing
        - arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-herokuDataInsert
  environment:
    S3_BUCKET: ${self:service}-kaggle-bucket-${self:provider.stage}
    BASE_UPLOAD_FILE_KEY: "kaggle"
    ORIGINAL_FILE_NAME: "imdb_top_1000.csv"

plugins:
  - serverless-iam-roles-per-function
  - serverless-step-functions

package:
  individually: true

functions:
  kaggleDownload:
    description: Downloads IMDB dataset from Kaggle and uploads it to S3.
    handler: CsharpHandlers::src.functions.kaggle.HandlerFunction::KaggleDownload
    package:
      artifact: bin/Release/net6.0/kaggle.zip
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
          - ssm:DescribeParameters
        Resource:
          - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/kaggle/username
          - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/kaggle/key
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource:
          - arn:aws:kms:${self:provider.region}:${aws:accountId}:key/84ecd075-f001-4bb8-abb4-d9670bf40fca
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource:
          - arn:aws:s3:::${self:service}-kaggle-bucket-${self:provider.stage}/*
    environment:
      KAGGLE_DATASET_USER: "harshitshankhdhar"
      KAGGLE_DATASET: "imdb-dataset-of-top-1000-movies-and-tv-shows"
      KAGGLE_BASE_URL: "https://www.kaggle.com/api/v1"
      KAGGLE_PERSONAL_USERNAME: ${ssm:/kaggle/username}
      KAGGLE_PERSONAL_KEY: ${ssm:/kaggle/key}

  dataCleansing:
    description: Fetch kaggle.zip from S3 bucket,unzip, apply cleansing operations, then re-zip eupload with new name.
    handler: CsharpHandlers::src.functions.csv.HandlerFunction::DataCleansing
    package:
      artifact: bin/Release/net6.0/cleansing.zip
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:ListBucket
        Resource:
          - arn:aws:s3:::${self:service}-kaggle-bucket-${self:provider.stage}/*
          - arn:aws:s3:::${self:service}-kaggle-bucket-${self:provider.stage}

  herokuDataInsert:
    description: Download CSV from S3, accesses Heroku CLI, insert data from CSV to Movies project
    handler: CsharpHandlers::src.functions.heroku.HandlerFunction::HerokuDataInsert
    package:
      artifact: bin/Release/net6.0/heroku.zip
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - arn:aws:s3:::${self:service}-kaggle-bucket-${self:provider.stage}/*
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/heroku/credentials/movies-database
    environment:
      SSM_HEROKU_KEY: "/heroku/credentials/movies-database"

stepFunctions:
  stateMachines:
    kaggleAutomationStateMachine:
      name: ${self:service}-${self:provider.stage}-kaggleAutomationStateMachine
      definition:
        Comment: "Step Function for automating CSV downlaod from Kaggle, cleansing data and inserting it into Heroku Postgres with copy SQL command"
        StartAt: Download
        States:
          Download:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-kaggleDownload
            Next: Cleansing

          Cleansing:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-dataCleansing
            Next: Heroku

          Heroku:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-herokuDataInsert
            End: true
      
      events:
        - schedule:
            rate: rate(14 days)

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-kaggle-bucket-${self:provider.stage}
